4. En una mesa de exámenes hay 3 profesores que les deben tomar un examen oral a 30 alumnos
de acuerdo al orden de llegada. Cada examen es tomado por un único profesor. Cuando un
alumno llega, espera a que alguno de los profesores (cualquiera) lo llame y se dirige al
escritorio correspondiente a ese profesor, donde le tomará el examen; al terminar el
profesor le da la nota y el alumno se retira. Cuando un profesor está libre llama al siguiente
alumno. Nota: todos los procesos deben terminar su ejecución.


Process profesor(ID: 1..3){

}

Process alumno[ID: 1..30]{
    integer sala;
    examen.llegue(ID, sala);
    profesor[sala].rindoExamen;
}

Monitor examen{
    cond c;
    cond profesorLibre;
    integer totalTomados = 0;
    integer cantAlumnos = 0;
    vectorAlu array[1..30] of integer;
    cola colaAlu;

    Procedure llegue(idAlu: in integer; sala: out integer){
        Signal(profesorLibre);
        cantAlumnos++;
        push(colaAlu, idAlu);
        wait(c);
        sala = vectorAlu[idAlu]
    }

    Procedure llamaAlumno(integer: in idProf ){
        integer idAlu;
        if(cantAlumnos > 0){
            cantAlumnos--;
        } else {
            wait(profesorLibre);
            cantAlumnos--;
        }
        pop(colaAlu, idAlu);
        vectoAlu[idAlu] = idProf;
        Signal(c);
    }
}

Monitor profesor[ID:1..3]{
    cond c;
    cond esperaNota;
    Integer notaAlu;

    procedure rindoExamen(nota: out integer){
        //Rendir examen
        Signal(c);
        Wait(esperaNota);
        Nota = notaAlu;
    }

    procedure tomarExamen(){
        wait(c);
        CorregirExamen(NotaAlu);
        Signal(esperaNota);
    }

}