
4. En una mesa de exámenes hay 3 profesores que les deben tomar un examen oral a 30 alumnos
de acuerdo al orden de llegada. Cada examen es tomado por un único profesor. Cuando un
alumno llega, espera a que alguno de los profesores (cualquiera) lo llame y se dirige al
escritorio correspondiente a ese profesor, donde le tomará el examen; al terminar el
profesor le da la nota y el alumno se retira. Cuando un profesor está libre llama al siguiente
alumno. Nota: todos los procesos deben terminar su ejecución.


Process alumnos[ID:1..30]{
    int mesa, nota;
    organizar.llegada(ID);
    mesaExamen[mesa].rendirExamen(ID, nota);
}

Process profesor[ID:1..3]{
    int cantAlu;

    while (cantAlu > 0){
        organizar.prof(ID, cantAlu);
        mesaExamen[ID].tomarExamen();
    }
    organizar.terminaron();
}

Monitor organizar{
    cond profesorLibre;
    cond esperando;
    queue aluEsp;
    int sala[30] = ([30] 0);
    int cantAlu = 30;

    Procedure llegada(ID: in int; mesa: out int){
        signal(profesorLibre);
        aluEsp.push(ID);
        wait(esperando);
        mesa = sala[ID];
    }

    Procedure prof(idProf: in int; cantAlu: out int){
        int idAux;

        While(empty(aluEsp) and cantAlu > 0){
            P(profesorLibre);
        }
        
        if (cantAlu != 0){
            cantAlu--;
            idAux = aluEsp.pop();
            sala[idAux] = idProf;
            signal(esperando);
        }
    }

    Procedure terminaron(){
        signal_all(profesorLibre);
    }
}

Monitor mesaExamen[3]{
    cond terminoExamen;
    int notaAlu, nota;

    Procedure rendirExamen(ID: in int; miNota: out int){
        //Rinde el examen
        signal(terminoExamen);
        wait(esperaNota);
        miNota = notaAlu;
    }

    Procedure tomarExamen(){
        wait(terminoExamen);
        nota = CorrigeExamen();
        notaAlu = nota;
        signal(esperaNota);
    }
}