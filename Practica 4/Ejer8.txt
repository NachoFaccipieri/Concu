8. Resolver con PMS (Pasaje de Mensajes SINCRÓNICOS) el siguiente problema. En un examen final hay P alumnos y 3 profesores.
Cuando todos los alumnos han llegado comienza el examen. Cada alumno resuelve su examen, lo entrega y espera a que alguno de los
profesores lo corrija y le indique la nota. Los profesores corrigen los exámenes respectando el orden en que los alumnos van 
entregando. Nota: maximizar la concurrencia y no generar demora innecesaria.

Process alumnos[ID: 1..P]{
    admin!llegue();
    admin?listos();
    //Resuelve examen
    admin!entregue(ID);
    admin?correccion(nota);
}

Process admin{
    int cant, idP, idA;
    Queue terminados;

    //Espera a que todos los alumnos lleguen
    while(cant != p){
        alumnos[*]?llegue();
        cant++;
    }

    //Avisa a los alumnos que pueden comenzar
    for (int i = 1; i <= p; i++){
        alumnos[i]!listos();
    }

    //Mientras haya alumnos que no hayan recibido la nota
    While(cant>0){
        do
            //Pregunto si algun almuno terminó y lo encolo para mantener el orden
            alumnos[*]?entregue(idA) --> terminados.push(ID);

            //Si algún alumno terminó y hay profesores libres, le asigno un examen para corregir con el ID del alumno
        []  not empty(terminados); profesores[*]?libre(idP) --> profesores[idP]!corregir(terminados.pop());

            //Si algún profesor terminó de corregir algún examen, le aviso al alumno que su examen está listo
        []  profesores[*]?examenListo(idA) -> alumnos[idA]!correccion(nota); cant--;
        od
    }
}

Process profesores[ID: 1..3]{
    int idA;

    //Aviso que estoy libre
    admin!libre(ID);
    //Espero a que me asignen un examen para corregir
    admin?corregir(idA);

    nota := corregirExamen();
    admin!examenListo(idA, nota);    
}